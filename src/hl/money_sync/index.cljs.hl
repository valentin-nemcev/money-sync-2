(page "index.html"
  (:require
    [cljsjs.material-components]
    [money-sync.rpc :as rpc]))

(rpc/list-accounts)

(defc= loading?      (some-> rpc/loading seq count))
(defc= error-message (some-> rpc/error .-message))

(defn form-values
  [form]
  (->> form
      js/jQuery
      .serializeArray

      ; #js [{name: "id", value: "15"}, ...] -> {:id "15" ...}
      (map #(vector (-> % .-name keyword) (.-value %)))
      (into {})))

(defmethod on! :mdc
  [elem _ f]
  (with-dom elem (.attachTo f elem)))


(defn split-map [m & ks]
  (cons (apply dissoc m ks) (map m ks)))

(defelem mdc-text-field
  [attributes]
  (let [[attributes name value label-children] (split-map attributes :name :value :label)
        id (gensym name)]
    (div :class "mdc-text-field" :mdc js/window.mdc.textField.MDCTextField attributes
        (input :type "text" :class "mdc-text-field__input" :id id :name name :value value)
        (label :class "mdc-text-field__label" :for id label-children)
        (div :class "mdc-text-field__bottom-line"))))

(defelem mdc-button
  [attributes children]
  (let [[attributes class icon] (split-map attributes :class :icon)]
    (button :class (cons "mdc-button" (sequence class)) attributes
            [(when icon (i :class "material-icons mdc-button__icon" icon))
             children])))

(defelem mdc-list
  [attributes children]
  (let [[attributes class] (split-map attributes :class)]
    (ul :class (cons "mdc-list" (sequence class)) attributes children)))

(defelem mdc-list-item
  [attributes children]
  (let [[attributes class] (split-map attributes :class)]
    (li :class (cons "mdc-list-item" (sequence class)) attributes children)))

(defelem mdc-toolbar
  [attributes children]
  (let [[attributes title] (split-map attributes :title)]
    (header
      :class "mdc-toolbar"
      (div
        :class "mdc-toolbar__row"
        (section
          :class "mdc-toolbar__section mdc-toolbar__section--align-start"
          (span :class "mdc-toolbar__title" title))))))


(defelem mdc-layout-grid
  [attributes children]
  (let [[attributes class] (split-map attributes :class)]
    (div :class (cons "mdc-layout-grid" (sequence class)) attributes children)))

(defelem mdc-layout-grid-inner
  [attributes children]
  (let [[attributes class] (split-map attributes :class)]
    (div :class (cons "mdc-layout-grid__inner" (sequence class)) attributes children)))

(defelem mdc-layout-grid-cell
  [attributes children]
  (let [
        [attributes class span] (split-map attributes :class :span)
        class (flatten ["mdc-layout-grid__cell"
                        (when span (str "mdc-layout-grid__cell--span-" span))
                        (sequence class)])]
    (div :class class attributes children)))

(defelem mdc-linear-progress
  [attributes children]
  (div :class "mdc-linear-progress mdc-linear-progress--indeterminate"
       (div :class "mdc-linear-progress__buffer")
       (div :class "mdc-linear-progress__bar mdc-linear-progress__primary-bar"
            (span :class "mdc-linear-progress__bar-inner"))
       (div :class "mdc-linear-progress__bar mdc-linear-progress__secondary-bar"
            (span :class "mdc-linear-progress__bar-inner"))))

(defmethod do! :snackbar-message
  [elem _ message]
  (with-dom elem
    (let [Snackbar js/window.mdc.snackbar.MDCSnackbar
          snackbar (.attachTo Snackbar elem)]
      (if message (.show snackbar #js {:message message})))))

(defelem mdc-snackbar
  [attributes children]
  (let [Snackbar js/window.mdc.snackbar.MDCSnackbar
        [attributes show] (split-map attributes :show)
        elem (div
               attributes
               :class "mdc-snackbar mdc-snackbar--align-start"
               attributes
               (div :class "mdc-snackbar__text" children)
               (div :class "mdc-snackbar__action-wrapper"
                    (button :type "button" :class "mdc-snackbar__action-button")))]
    elem))

(html
  (head
    (title "MoneySync")
    (link :href "https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css" :rel "stylesheet")
    (link :href "cljsjs/material-components/development/material-components.inc.css" :rel "stylesheet")
    (link :href "https://fonts.googleapis.com/icon?family=Material+Icons" :rel "stylesheet")
    (link :href "https://fonts.googleapis.com/css?family=Roboto:300,400,500" :rel "stylesheet"))
  (body :class "mdc-typography"
    (mdc-toolbar :title "MoneySync")
    (div
      :toggle loading?
      :css {:position "fixed"
            :right "var(--mdc-layout-grid-margin-desktop)"
            :top "var(--mdc-layout-grid-margin-desktop)"
            :padding "16px"
            :background-color "var(--mdc-theme-background)"}
      :class "mdc-card"
      "Loading...")
    (mdc-layout-grid
      (mdc-layout-grid-inner
        (mdc-layout-grid-cell
          :span 12
          (h2 :class "mdc-typography--display2" "Accounts")
          (mdc-snackbar :snackbar-message error-message (text "Error: ~{error-message}"))

          (mdc-list
            (for-tpl
              [{:keys [id name]} rpc/accounts]
              (let [editing (cell false)]
                (mdc-list-item
                  :id id
                  (if-tpl editing
                          (form :css/display "inline-block"
                                :submit #(do
                                           (->> % .-target form-values (rpc/update-account @id))
                                           (reset! editing false))
                                (mdc-text-field :name "name" :placeholder "Account name" :value name)
                                (mdc-button :icon "done"))
                          [(span name)
                           (button :class "mdc-button"
                                   :click #(swap! editing not)
                                   (i :class "material-icons mdc-button__icon" "edit"))])
                  (mdc-button :icon "delete" :click #(rpc/delete-account @id))))))
          (form :submit #(let
                           [form (.-target %)]
                           (rpc/create-account (form-values form))
                           (.reset form))
                (mdc-text-field :name "name" :label "New account name")
                (mdc-button "Add account")))))))
